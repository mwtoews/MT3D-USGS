# Main CMake file to build MT3D-USGS distribution

cmake_minimum_required(VERSION 3.1...3.13)

project(MT3D-USGS LANGUAGES Fortran)

# Test if Fortran 2003 Standard stream I/O is supported
include(CheckFortranSourceCompiles)
check_fortran_source_compiles("
      PROGRAM test
        OPEN(UNIT=9,FORM='UNFORMATTED',ACCESS='STREAM')
      END PROGRAM
" FORTRAN_2003_STANDARD_IO)

if(${FORTRAN_2003_STANDARD_IO})
  set(FORTRAN_FORM_BINARY FALSE)
else()
# Test if non-standard BINARY extension is supported
include(CheckFortranSourceCompiles)
check_fortran_source_compiles("
      PROGRAM test
        OPEN(UNIT=9,FORM='BINARY')
      END PROGRAM
" FORTRAN_FORM_BINARY
)
endif()

# Generate one of three files
if(${FORTRAN_2003_STANDARD_IO})
set(OPENSPEC "\
C     Generated by CMake for Standard Fortran 2003
      CHARACTER*20 ACCESS,FORM,ACTION(2)
      DATA ACCESS/'STREAM'/
      DATA FORM/'UNFORMATTED'/
      DATA (ACTION(I),I=1,2)/'READ','READWRITE'/
")
elseif(${FORTRAN_FORM_BINARY})
set(OPENSPEC "\
C     Generated by CMake for non-standard Fortran with BINARY extension
      CHARACTER*20 ACCESS,FORM,ACTION(2)
      DATA ACCESS/'SEQUENTIAL'/
      DATA FORM/'BINARY'/
      DATA (ACTION(I),I=1,2)/'READ','READWRITE'/
")
else()  # pre-2003 Fortran Standard
set(OPENSPEC "\
C     Generated by CMake for pre-2003 Fortran Standard
      CHARACTER*20 ACCESS,FORM,ACTION(2)
      DATA ACCESS/'SEQUENTIAL'/
      DATA FORM/'UNFORMATTED'/
      DATA (ACTION(I),I=1,2)/'READ','READWRITE'/
")
endif()

# Set default compile flags
set(CMAKE_${lang}_FLAGS_DEBUG "-O0 -g")
set(CMAKE_${lang}_FLAGS_RELEASE "-O2 -DNDEBUG")
set(CMAKE_${lang}_FLAGS_RELWITHDEBINFO "-O2 -g")

# Set warnings
include(CheckFortranCompilerFlag)
if("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "GNU")
  # flags available since version 5
  add_compile_options(
    -Wall
    -Wextra
    -Wno-compare-reals
    -Wno-conversion
    -Wno-unused-dummy-argument
    -Wno-unused-variable
    -Wno-unused-label
    -Wno-unused-parameter
    -Wno-maybe-uninitialized
  )
  if(${CMAKE_Fortran_COMPILER_VERSION} VERSION_GREATER "8.0.0")
    add_compile_options(-Wno-do-subscript)
  endif()
elseif("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "Intel")
  if(MSVC)  # Windows
    add_compile_options(/warn:all)
  else()  # Linux / macOS
    add_compile_options(-warn all)
  endif()
else()  # Other Fortran compiler: guess
  check_fortran_compiler_flag(-Wall HAS_WALL)
  if(${HAS_WALL})
    add_compile_options(-Wall)
  endif()
endif()

# Autoconfigure CMAKE_BUILD_TYPE, if not provided
set(default_build_type "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' "
                 "as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Set options for build type
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  if("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options(
      -fcheck=all
      -fbacktrace
      -fbounds-check
      -ffpe-trap=overflow,zero,invalid,denormal)
#  elseif("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "Intel")
#  if(MSVC)  # Windows
#  else()
#  endif()
  endif()
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
  if("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options(
      -ffpe-summary=overflow
      -ffpe-trap=overflow,zero)
#  elseif("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "Intel")
#  if(MSVC)  # Windows
#  else()  # Linux / macOS
#  endif()
  endif()
endif()

# Add two source directories, each with one executable target
add_subdirectory(src mt3dusgs)
add_subdirectory(mt3dms/src mt3dms)

